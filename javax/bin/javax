#!/bin/bash

# Pseudo Java Compiler (javax) - Linux/Mac Bash Script
# Usage: javax [options] input.pj
# Modular Version 2.0

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory and parser script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PARSER_SCRIPT="$SCRIPT_DIR/javax_parser.py"

# Function to print colored output
print_error() {
    echo -e "${RED}Error: $1${NC}" >&2
}

print_success() {
    echo -e "${GREEN}$1${NC}"
}

print_warning() {
    echo -e "${YELLOW}Warning: $1${NC}"
}

print_info() {
    echo -e "${BLUE}$1${NC}"
}

# Check if Python is available
check_python() {
    if ! command -v python &> /dev/null && ! command -v python &> /dev/null; then
        print_error "Python is not installed or not in PATH"
        echo "Please install Python 3.6+ and add it to your PATH"
        exit 1
    fi
    
    # Prefer python over python
    if command -v python &> /dev/null; then
        PYTHON_CMD="python"
    else
        PYTHON_CMD="python"
    fi
}

# Check if parser script exists
check_parser_script() {
    if [[ ! -f "$PARSER_SCRIPT" ]]; then
        print_error "Parser script not found at $PARSER_SCRIPT"
        echo "Please ensure javax_parser.py is in the same directory as this script"
        exit 1
    fi
}

# Check if modules directory exists
check_modules() {
    local modules_dir="$SCRIPT_DIR/modules"
    if [[ ! -d "$modules_dir" ]]; then
        print_error "Modules directory not found at $modules_dir"
        echo "Please ensure the 'modules' directory with all parser modules is present"
        exit 1
    fi
    
    # Check for essential modules
    local essential_modules=(
        "config/synonyms.py"
        "core/data_structures.py"
        "core/parser_engine.py"
        "generators/java_generator.py"
        "utils/cli.py"
        "utils/file_handler.py"
    )
    
    for module in "${essential_modules[@]}"; do
        if [[ ! -f "$modules_dir/$module" ]]; then
            print_error "Essential module missing: $modules_dir/$module"
            echo "Please ensure all required modules are present"
            exit 1
        fi
    done
    
    print_info "Modular parser structure verified ✓"
}

# Check for Java compiler if needed
check_javac() {
    local needs_javac=false
    
    for arg in "$@"; do
        case $arg in
            -c|--compile|-r|--run|-cr|-rc)
                needs_javac=true
                break
                ;;
        esac
    done
    
    if $needs_javac && ! command -v javac &> /dev/null; then
        print_warning "Java compiler (javac) not found in PATH"
        echo "Compilation features will not work"
        echo "Please install JDK and add it to your PATH"
    fi
}

# Show help message
show_help() {
    cat << EOF
Pseudo Java Compiler (javax) - Convert pseudo-Java to Java
Modular Version 2.0

Usage: javax [options] input.pj

Options:
  -o <file>        Output Java file
  --output-dir <dir> Output directory for Java files
  -c, --compile     Compile generated Java code
  -r, --run         Compile and run the generated Java code
  -v, --verbose     Verbose output
  --test            Run built-in test
  --help            Show this help message
  --version         Show version information

Examples:
  javax example.pj
  javax example.pj -o Example.java
  javax example.pj --output-dir src/main/java
  javax example.pj -cr
  javax --test

File Extension:
  .pj              Pseudo-Java source files

Environment Variables:
  JAVAX_VERBOSE=1    Enable verbose output by default
  JAVAX_OUTPUT_DIR   Default output directory

Modular Structure:
  This version uses a modular architecture with components in:
  - config/        Configuration and synonyms
  - core/          Core parsing engine
  - parsers/       Individual component parsers
  - generators/    Code generation modules
  - utils/         Utility functions
  - tests/         Test modules
EOF
}

# Process combined flags
process_args() {
    local args=()
    
    for arg in "$@"; do
        case $arg in
            -cr|-rc)
                args+=("--compile" "--run")
                ;;
            *)
                args+=("$arg")
                ;;
        esac
    done
    
    echo "${args[@]}"
}

# Validate installation
validate_installation() {
    print_info "Validating Pseudo Java Parser installation..."
    
    # Check Python
    check_python
    print_info "Python: $PYTHON_CMD ✓"
    
    # Check parser script
    check_parser_script
    print_info "Main parser script: javax_parser.py ✓"
    
    # Check modules
    check_modules
    
    # Test import of essential modules
    if ! $PYTHON_CMD -c "
import sys
import os
sys.path.insert(0, os.path.join('$SCRIPT_DIR', 'modules'))
try:
    from config.synonyms import SynonymConfig
    from core.parser_engine import PseudoJavaParser
    from generators.java_generator import JavaCodeGenerator
    print('Module imports successful ✓')
except ImportError as e:
    print(f'Module import error: {e}')
    exit(1)
" 2>/dev/null; then
        print_error "Module validation failed"
        echo "Some Python modules could not be imported"
        exit 1
    fi
    
    print_success "Installation validated successfully!"
}

# Main function
main() {
    # Handle no arguments
    if [[ $# -eq 0 ]]; then
        show_help
        exit 0
    fi
    
    # Handle special flags
    case "$1" in
        --help|-h)
            show_help
            exit 0
            ;;
        --version)
            $PYTHON_CMD "$PARSER_SCRIPT" --version
            exit 0
            ;;
        --test)
            print_info "Running built-in tests..."
            $PYTHON_CMD "$PARSER_SCRIPT" --test
            exit $?
            ;;
        --validate)
            validate_installation
            exit 0
            ;;
    esac
    
    # Check dependencies
    check_python
    check_parser_script
    check_modules
    
    # Check for Java compiler if needed
    check_javac "$@"
    
    # Process arguments
    processed_args=$(process_args "$@")
    
    # Add environment variable defaults
    if [[ -n "$JAVAX_VERBOSE" && "$JAVAX_VERBOSE" != "0" ]]; then
        processed_args="$processed_args --verbose"
    fi
    
    if [[ -n "$JAVAX_OUTPUT_DIR" ]]; then
        # Check if --output-dir is already specified
        if [[ ! " $processed_args " =~ " --output-dir " ]]; then
            processed_args="$processed_args --output-dir $JAVAX_OUTPUT_DIR"
        fi
    fi
    
    # Execute Python parser
    print_info "Pseudo Java Compiler v2.0 (Modular) - Processing..."
    
    # Use eval to properly handle the processed arguments
    eval "$PYTHON_CMD \"$PARSER_SCRIPT\" $processed_args"
    
    local exit_code=$?
    
    if [[ $exit_code -eq 0 ]]; then
        echo
        print_success "Process completed successfully!"
    else
        echo
        print_error "Compilation failed. Use -v for verbose output."
    fi
    
    exit $exit_code
}

# Handle script interruption
trap 'echo; print_warning "Process interrupted by user"; exit 130' INT TERM

# Run main function with all arguments
main "$@"